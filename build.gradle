apply plugin: 'groovy'

buildscript {
    ext {
        dl4j_version = "1.0.0-beta"
        //dl4j_version = "0.9.1" // lastest stable as for today
    }
    repositories {
        mavenCentral()
    }
}

//zip64 = true

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-simple:1.7.25' // added to avoid slf4j error message
    compile 'org.codehaus.groovy:groovy:2.5.1'
    compile "org.deeplearning4j:deeplearning4j-core:${dl4j_version}"
    compile "org.nd4j:nd4j-native-platform:${dl4j_version}"
    compile 'org.jfree:jfreechart:1.5.0'
}

task runMLPClassifierLinear(dependsOn: 'classes', type: JavaExec, description: 'Run a simple Linear Classifier'){
    classpath = sourceSets.main.runtimeClasspath
    main = 'dz.corposense.examples.MLPClassifierLinear'
}

task runBasicCSVClassifier(dependsOn: 'classes', type: JavaExec, description: 'Run a simple CSV Classifier'){
    classpath = sourceSets.main.runtimeClasspath
    main = 'dz.corposense.examples.BasicCSVClassifier'
}

task runStormReportsRecordReader(dependsOn: 'classes', type: JavaExec, description: 'Run a Storm reports record reader generator'){
    classpath = sourceSets.main.runtimeClasspath
    main = 'dz.corposense.examples.StormReportsRecordReader'
}

task runMnistImagePipelineExample(dependsOn: 'classes', type: JavaExec, description: 'Run Image pipeline agains Mnist data set'){
    classpath = sourceSets.main.runtimeClasspath
    main = 'dz.corposense.examples.MnistImagePipelineExample'
}

task runMnistImagePipelineLoader(dependsOn: 'classes', type: JavaExec, description: 'Run trained model againts loaded image'){
    classpath = sourceSets.main.runtimeClasspath
    main = 'dz.corposense.examples.MnistImagePipelineLoader'
}

task runImportKerasConfig(dependsOn: 'classes', type: JavaExec, description: 'Import Keras iris data set model'){
    classpath = sourceSets.main.runtimeClasspath
    main = 'dz.corposense.examples.ImportKerasConfig'
}
